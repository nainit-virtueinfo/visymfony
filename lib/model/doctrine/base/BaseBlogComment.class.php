<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('BlogComment', 'doctrine');

/**
 * BaseBlogComment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $blog_article_id
 * @property string $author
 * @property clob $content
 * @property BlogArticle $BlogArticle
 * 
 * @method integer     getId()              Returns the current record's "id" value
 * @method integer     getBlogArticleId()   Returns the current record's "blog_article_id" value
 * @method string      getAuthor()          Returns the current record's "author" value
 * @method clob        getContent()         Returns the current record's "content" value
 * @method BlogArticle getBlogArticle()     Returns the current record's "BlogArticle" value
 * @method BlogComment setId()              Sets the current record's "id" value
 * @method BlogComment setBlogArticleId()   Sets the current record's "blog_article_id" value
 * @method BlogComment setAuthor()          Sets the current record's "author" value
 * @method BlogComment setContent()         Sets the current record's "content" value
 * @method BlogComment setBlogArticle()     Sets the current record's "BlogArticle" value
 * 
 * @package    doctrine
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBlogComment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('blog_comment');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('blog_article_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('author', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('BlogArticle', array(
             'local' => 'blog_article_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}